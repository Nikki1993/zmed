!function(){"use strict";function t(t){t.theme("default").primaryPalette("blue",{"default":"500"}).accentPalette("red").warnPalette("deep-orange").backgroundPalette("grey",{"default":"100"})}function e(t,e){t.useSanitizeValueStrategy(null),t.useLoader("$translatePartialLoader",{urlTemplate:"../JSON/{part}-{lang}.json"}),e.addPart("locale"),e.addPart("navigation"),e.addPart("tabs"),e.addPart("products"),e.addPart("about"),t.preferredLanguage("ru"),t.fallbackLanguage("en")}t.$inject=["$mdThemingProvider"],e.$inject=["$translateProvider","$translatePartialLoaderProvider"],angular.module("webApp",["ngMaterial","duScroll","ngMessages","ngclipboard","pascalprecht.translate"]).config(t).config(e)}(),function(){"use strict";function t(t,e,n){var a=this;a.name=[],a.pathToJson="../JSON/about-en.json",n.all(a.pathToJson).then(function(t){a.namespace=Object.keys(t.data),a.count=n.setObjectCount(Object.keys(t.data[a.namespace]).length),console.log("vm.namespace = "+a.namespace);for(var e in a.namespace)a.namespace.hasOwnProperty(e)&&(a.name=Object.keys(t.data[a.namespace][e]),console.log(a.name))}),a.getContent=function(t,e){return a.namespace+"."+t+"."+a.name[e]}}angular.module("webApp").controller("aboutCardController",t),t.$inject=["$translatePartialLoader","$translate","JsonData"]}(),function(){"use strict";function t(t,e,n){var a=this;a.changeLanguage=function(t){e.use(t)},a.openLeftMenu=function(){t("left").toggle()};var o;a.openMenu=function(t,e){o=e,t(e)}}angular.module("webApp").controller("mainController",t),t.$inject=["$mdSidenav","$translate","JsonData"]}(),function(){"use strict";function t(t,e,n){var a=this;a.name=[],a.pathToJson="../JSON/navigation-en.json",n.all(a.pathToJson).then(function(t){a.namespace=Object.keys(t.data),a.count=n.setObjectCount(Object.keys(t.data[a.namespace]).length),console.log("vm.namespace = "+a.namespace);for(var e in a.namespace)a.namespace.hasOwnProperty(e)&&(a.name=Object.keys(t.data[a.namespace][e]),console.log(a.name))}),a.getContent=function(t,e){return a.namespace+"."+t+"."+a.name[e]}}angular.module("webApp").controller("navigationController",t),t.$inject=["$translatePartialLoader","$translate","JsonData"]}(),function(){"use strict";function t(e,n,a,o,r,l){var c=this;c.pathToJson=["../JSON/tabs-en.json","../JSON/products-en.json","../JSON/products-ru.json"],c.showMore=function(e){o.show({controller:t,controllerAs:"tabsCtrl",templateUrl:"../TEMPLATES/products.html",parent:angular.element(document.body),targetEvent:e,clickOutsideToClose:!0,fullscreen:"true"}),l.$watch(function(){return r("sm")||r("xs")},function(t){c.customFullscreen=t===!0})},c.showDescription=function(){c.option?c.option=!1:c.option=!0},c.cancel=function(){o.cancel()},c.data=[],a.all(c.pathToJson[0]).then(function(t){c.namespace=Object.keys(t.data),c.count=a.setObjectCount(Object.keys(t.data[c.namespace]).length),console.log("vm.namespace from tabs = "+c.namespace);for(var e in c.namespace)c.namespace.hasOwnProperty(e)&&(c.name=Object.keys(t.data[c.namespace][e]),console.log(c.name))}),c.getContent=function(t,e){return c.namespace+"."+t+"."+c.name[e]},c.products=[],"ru"===n.use()?a.all(c.pathToJson[2]).then(function(t){c.products=t.data.product}):a.all(c.pathToJson[1]).then(function(t){c.products=t.data.product})}angular.module("webApp").controller("tabsController",t),t.$inject=["$translatePartialLoader","$translate","JsonData","$mdDialog","$mdMedia","$scope"]}(),function(){"use strict";function t(){return{restrict:"EA",priority:1001,templateUrl:"../TEMPLATES/about.html",controller:"aboutCardController",controllerAs:"aboutCardCtrl"}}angular.module("webApp").directive("aboutCard",t)}(),function(){"use strict";function t(){return{restrict:"EA",priority:1001,templateUrl:"../TEMPLATES/navigation.html",controller:"navigationController",controllerAs:"navCtrl"}}function e(){return{restrict:"EA",priority:1001,templateUrl:"../TEMPLATES/navigation-sidenav.html",controller:"navigationController",controllerAs:"navCtrl"}}angular.module("webApp").directive("menuBar",t).directive("menuBarSide",e)}(),function(){"use strict";function t(){return function(t,e,n){e.bind("keydown keypress",function(a){13===a.which&&(a.preventDefault(),e.blur(),t.$apply(n.ngBlur))})}}angular.module("webApp").directive("blurOnEnter",t)}(),function(){"use strict";function t(){return{restrict:"EA",priority:1001,templateUrl:"../TEMPLATES/tabs.html",controller:"tabsController",controllerAs:"tabsCtrl"}}angular.module("webApp").directive("boneTab",t)}(),function(){"use strict";function t(t){return{all:function(e){return t({method:"GET",url:e})},setObjectCount:function(t){return new Array(t)}}}angular.module("webApp").factory("JsonData",t),t.$inject=["$http"]}();
//# sourceMappingURL=data:application/json;base64,
